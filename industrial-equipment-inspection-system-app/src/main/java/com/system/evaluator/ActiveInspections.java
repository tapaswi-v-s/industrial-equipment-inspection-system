/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.system.evaluator;

import com.system.models.Inspection;
import com.system.models.Plant;
import com.system.utils.DatabaseHelper;
import com.system.utils.PDFUtil;
import com.system.utils.Utils;
import java.time.LocalDate;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author tapas
 */
public class ActiveInspections extends javax.swing.JPanel {

    /**
     * Creates new form ViewReports
     */
    JPanel mainPanel;
    List<Inspection> activeInspections;
    EvaluatorController controller = new EvaluatorController();
    int evaluatorID;
    public ActiveInspections(JPanel mainPanel, int evaluatorID) {
        this.mainPanel = mainPanel;
        this.evaluatorID = evaluatorID;
        initComponents();
        populate();
    }
    
    void populate(){
        activeInspections = controller.fetchActiveInspections();
        txtRemark.setText("");
        populateActiveInspections();
    }
    
    void populateActiveInspections(){
        DefaultTableModel model = (DefaultTableModel) tblActiveInspections.getModel();
        model.setRowCount(0);
        for (Inspection i : activeInspections) {
            Vector<String> row = new Vector<String>();
            row.add("" + i.getId());
            try{
//                String f = Utils.sdf.format(LocalDate.parse());
                row.add(i.getDate());
            }catch(Exception e){
                String f = Utils.sdf.format(LocalDate.now());
                row.add(f);
            }
            row.add(i.getRemark());
            row.add(""+i.getPlantID());
            model.addRow(row);
        }
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblActiveInspections = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        btnView1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtRemark = new javax.swing.JTextArea();
        btnSubmit = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnView2 = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 51, 102));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Active Inspection");

        tblActiveInspections.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Inspection Date", "Remark", "Plant ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblActiveInspections);

        btnBack.setText("‚Üê Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnView1.setText("Equipment Report");
        btnView1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnView1ActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Remark*");

        txtRemark.setColumns(20);
        txtRemark.setRows(5);
        jScrollPane2.setViewportView(txtRemark);

        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        btnClear.setForeground(new java.awt.Color(255, 0, 51));
        btnClear.setText("X");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnView2.setText("All Inspection Report");
        btnView2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnView2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(btnBack)
                        .addGap(107, 107, 107)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 103, Short.MAX_VALUE)
                        .addComponent(btnView1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addComponent(btnSubmit)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel2)
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnClear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnView2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(btnView1))
                    .addComponent(btnBack))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addComponent(btnSubmit))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnClear)
                        .addComponent(btnView2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        Utils.goBack(mainPanel, this);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnView1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnView1ActionPerformed
        
        if(tblActiveInspections.getSelectedRow() < 0){
            Utils.showDialog(this, null, "Please select an inspection");
        }else{
            Inspection i = activeInspections
                    .get(tblActiveInspections.getSelectedRow());
            String fileName = "Plant_"+i.getPlantID()+"_Equipments";
            PDFUtil.generatePDF(this, "Plant_"+i.getPlantID()+"_Equipments", fileName, DatabaseHelper.getInstance()
                .fetchData("SELECT * FROM sql5694823.equipment WHERE plant_id = "+
                        activeInspections.get(tblActiveInspections.getSelectedRow()).getPlantID()));
        }
        
    }//GEN-LAST:event_btnView1ActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        populate();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        if(tblActiveInspections.getSelectedRow() < 0){
            Utils.showDialog(this, null, "Please select an inspection");
        }else{
            if(txtRemark.getText().isBlank()){
                Utils.showDialog(this, null, "Please enter remark");
            }else{
                Inspection i = activeInspections.get(tblActiveInspections.getSelectedRow());
                i.setEvaluatorID(this.evaluatorID);
                i.setEvaluatorRemark(txtRemark.getText().trim());
                if(controller.updateInspection(i)){
                    Utils.showDialog(this, "Inspection Submitted Successfylly...", null);
                    populate();
                }else{
                    Utils.showDialog(this, null, "Something went wrong...");
                }
            }
        }
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void btnView2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnView2ActionPerformed
        String fileName = "Active_Inspections";
        PDFUtil.generatePDF(this,fileName, "Active Inspections", DatabaseHelper.getInstance()
            .fetchData("SELECT * FROM sql5694823.inspection WHERE evaluator_id is null"));
    }//GEN-LAST:event_btnView2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JButton btnView1;
    private javax.swing.JButton btnView2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblActiveInspections;
    private javax.swing.JTextArea txtRemark;
    // End of variables declaration//GEN-END:variables
}
